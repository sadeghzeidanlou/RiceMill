// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiceMill.Persistence;

#nullable disable

namespace RiceMill.Persistence.Migrations
{
    [DbContext(typeof(RiceMillDbContext))]
    [Migration("20230629082618_Set_AllowNull_Some_Column")]
    partial class Set_AllowNull_Some_Column
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeliveryRiceThreshing", b =>
                {
                    b.Property<Guid>("DeliveriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiceThreshingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DeliveriesId", "RiceThreshingsId");

                    b.HasIndex("RiceThreshingsId");

                    b.ToTable("DeliveryRiceThreshing");
                });

            modelBuilder.Entity("DryerHistoryInputLoad", b =>
                {
                    b.Property<Guid>("DryerHistoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputLoadsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DryerHistoriesId", "InputLoadsId");

                    b.HasIndex("InputLoadsId");

                    b.ToTable("DryerHistoryInputLoad");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Concern", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Concerns");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Delivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("BrokenRice")
                        .HasColumnType("smallint");

                    b.Property<Guid>("CarrierPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("ChickenRice")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DelivererPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Flour")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ReceiverPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("UnbrokenRice")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarrierPersonId");

                    b.HasIndex("DelivererPersonId");

                    b.HasIndex("ReceiverPersonId");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Dryer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Dryers");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.DryerHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DryerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiceThreshingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StopTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DryerId");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("RiceThreshingId");

                    b.HasIndex("UserId");

                    b.ToTable("DryerHistories");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BrokenRice")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("Flour")
                        .HasColumnType("real");

                    b.Property<DateTime>("IncomeTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("UnbrokenRice")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.InputLoad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CarrierPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DelivererPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NoticesType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("NumberOfBags")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberOfBagsInDryer")
                        .HasColumnType("smallint");

                    b.Property<Guid>("OwnerPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceiveTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VillageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CarrierPersonId");

                    b.HasIndex("DelivererPersonId");

                    b.HasIndex("OwnerPersonId");

                    b.HasIndex("ReceiverPersonId");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VillageId");

                    b.ToTable("InputLoads");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("BrokenRice")
                        .HasColumnType("real");

                    b.Property<Guid>("ConcernId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("Flour")
                        .HasColumnType("real");

                    b.Property<Guid>("InputLoadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.Property<Guid>("PaidPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("UnbrokenRice")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConcernId");

                    b.HasIndex("InputLoadId")
                        .IsUnique();

                    b.HasIndex("PaidPersonId");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceMill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("Wage")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPersonId");

                    b.ToTable("RiceMills");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceThreshing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("BrokenRice")
                        .HasColumnType("smallint");

                    b.Property<short>("ChickenRice")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<short>("Flour")
                        .HasColumnType("smallint");

                    b.Property<Guid>("IncomeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelivered")
                        .HasColumnType("bit");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RiceThreshingEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RiceThreshingStart")
                        .HasColumnType("datetime2");

                    b.Property<short>("UnbrokenRice")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IncomeId")
                        .IsUnique();

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("RiceThreshings");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ParentUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ParentUserId")
                        .IsUnique();

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserPersonId")
                        .IsUnique()
                        .HasFilter("[UserPersonId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.UserActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AfterEdit")
                        .HasMaxLength(3000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ApplicationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeforeEdit")
                        .HasMaxLength(3000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserActivityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OwnerPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPersonId");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Village", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("RiceMillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RiceMillId");

                    b.HasIndex("UserId");

                    b.ToTable("Villages");
                });

            modelBuilder.Entity("DeliveryRiceThreshing", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Delivery", null)
                        .WithMany()
                        .HasForeignKey("DeliveriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceThreshing", null)
                        .WithMany()
                        .HasForeignKey("RiceThreshingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DryerHistoryInputLoad", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.DryerHistory", null)
                        .WithMany()
                        .HasForeignKey("DryerHistoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.InputLoad", null)
                        .WithMany()
                        .HasForeignKey("InputLoadsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Concern", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Concerns")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Concerns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Delivery", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Person", "CarrierPerson")
                        .WithMany("CarrierDeliveries")
                        .HasForeignKey("CarrierPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "DelivererPerson")
                        .WithMany("DelivererDeliveries")
                        .HasForeignKey("DelivererPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "ReceiverPerson")
                        .WithMany("ReceiverDeliveries")
                        .HasForeignKey("ReceiverPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Deliveries")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Deliveries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Vehicle", "Vehicle")
                        .WithMany("Deliveries")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CarrierPerson");

                    b.Navigation("DelivererPerson");

                    b.Navigation("ReceiverPerson");

                    b.Navigation("RiceMill");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Dryer", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Dryers")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Dryers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.DryerHistory", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Dryer", "Dryer")
                        .WithMany("DryerHistories")
                        .HasForeignKey("DryerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("DryerHistories")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceThreshing", "RiceThreshing")
                        .WithMany("DryerHistories")
                        .HasForeignKey("RiceThreshingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("DryerHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dryer");

                    b.Navigation("RiceMill");

                    b.Navigation("RiceThreshing");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Income", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Incomes")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Incomes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.InputLoad", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Person", "CarrierPerson")
                        .WithMany("CarrierInputLoads")
                        .HasForeignKey("CarrierPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "DelivererPerson")
                        .WithMany("DelivererInputLoads")
                        .HasForeignKey("DelivererPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "OwnerPerson")
                        .WithMany("OwnedInputLoads")
                        .HasForeignKey("OwnerPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "ReceiverPerson")
                        .WithMany("ReceiverInputLoads")
                        .HasForeignKey("ReceiverPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("InputLoads")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("InputLoads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Vehicle", "Vehicle")
                        .WithMany("InputLoads")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Village", "Village")
                        .WithMany("InputLoads")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CarrierPerson");

                    b.Navigation("DelivererPerson");

                    b.Navigation("OwnerPerson");

                    b.Navigation("ReceiverPerson");

                    b.Navigation("RiceMill");

                    b.Navigation("User");

                    b.Navigation("Vehicle");

                    b.Navigation("Village");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Payment", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Concern", "Concern")
                        .WithMany("Payments")
                        .HasForeignKey("ConcernId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.InputLoad", "InputLoad")
                        .WithOne("Payment")
                        .HasForeignKey("RiceMill.Domain.Models.Payment", "InputLoadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "PaidPerson")
                        .WithMany("Payments")
                        .HasForeignKey("PaidPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Payments")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Concern");

                    b.Navigation("InputLoad");

                    b.Navigation("PaidPerson");

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Person", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("MemberPeople")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("People")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceMill", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Person", "OwnerPerson")
                        .WithMany("OwnedRiceMills")
                        .HasForeignKey("OwnerPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OwnerPerson");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceThreshing", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Income", "Income")
                        .WithOne("RiceThreshing")
                        .HasForeignKey("RiceMill.Domain.Models.RiceThreshing", "IncomeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("RiceThreshings")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("RiceThreshings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Income");

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.User", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.User", "ParentUser")
                        .WithOne()
                        .HasForeignKey("RiceMill.Domain.Models.User", "ParentUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Users")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.Person", "UserPerson")
                        .WithOne("RelatedUser")
                        .HasForeignKey("RiceMill.Domain.Models.User", "UserPersonId");

                    b.Navigation("ParentUser");

                    b.Navigation("RiceMill");

                    b.Navigation("UserPerson");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.UserActivity", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("UserActivities")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("UserActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.Person", "OwnerPerson")
                        .WithMany("OwnedVehicles")
                        .HasForeignKey("OwnerPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Vehicles")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OwnerPerson");

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Village", b =>
                {
                    b.HasOne("RiceMill.Domain.Models.RiceMill", "RiceMill")
                        .WithMany("Villages")
                        .HasForeignKey("RiceMillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiceMill.Domain.Models.User", "User")
                        .WithMany("Villages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RiceMill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Concern", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Dryer", b =>
                {
                    b.Navigation("DryerHistories");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Income", b =>
                {
                    b.Navigation("RiceThreshing");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.InputLoad", b =>
                {
                    b.Navigation("Payment");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Person", b =>
                {
                    b.Navigation("CarrierDeliveries");

                    b.Navigation("CarrierInputLoads");

                    b.Navigation("DelivererDeliveries");

                    b.Navigation("DelivererInputLoads");

                    b.Navigation("OwnedInputLoads");

                    b.Navigation("OwnedRiceMills");

                    b.Navigation("OwnedVehicles");

                    b.Navigation("Payments");

                    b.Navigation("ReceiverDeliveries");

                    b.Navigation("ReceiverInputLoads");

                    b.Navigation("RelatedUser");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceMill", b =>
                {
                    b.Navigation("Concerns");

                    b.Navigation("Deliveries");

                    b.Navigation("DryerHistories");

                    b.Navigation("Dryers");

                    b.Navigation("Incomes");

                    b.Navigation("InputLoads");

                    b.Navigation("MemberPeople");

                    b.Navigation("Payments");

                    b.Navigation("RiceThreshings");

                    b.Navigation("UserActivities");

                    b.Navigation("Users");

                    b.Navigation("Vehicles");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.RiceThreshing", b =>
                {
                    b.Navigation("DryerHistories");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.User", b =>
                {
                    b.Navigation("Concerns");

                    b.Navigation("Deliveries");

                    b.Navigation("DryerHistories");

                    b.Navigation("Dryers");

                    b.Navigation("Incomes");

                    b.Navigation("InputLoads");

                    b.Navigation("Payments");

                    b.Navigation("People");

                    b.Navigation("RiceThreshings");

                    b.Navigation("UserActivities");

                    b.Navigation("Vehicles");

                    b.Navigation("Villages");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Vehicle", b =>
                {
                    b.Navigation("Deliveries");

                    b.Navigation("InputLoads");
                });

            modelBuilder.Entity("RiceMill.Domain.Models.Village", b =>
                {
                    b.Navigation("InputLoads");
                });
#pragma warning restore 612, 618
        }
    }
}
